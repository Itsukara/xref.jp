# ※PHP5.4～
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 無
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
メタ
	エンジン
対話起動_C++	-
対話起動_C#		-
対話起動_VB		-
対話起動_Java	-
対話起動_Scala	$ scala
対話起動_PHP	$ php -a
対話起動_JS		$ node
対話起動_Ruby	$ irb
対話起動_Python	$ python
対話起動_Perl	$ perl -d -e 1

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 変数
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 宣言
入出力
	入出力
		標準出力_C++			std::cout << "Hello\n";
		標準出力_C#				System.Console.WriteLine("Hello");
		標準出力_VB				System.Console.WriteLine("Hello");
		標準出力_Java			System.out.println("Hello");
		標準出力_Scala			System.out.println("Hello");
		標準出力_PHP			print "Hello\n";
		標準出力_JS				console.log("Hello");
		標準出力_Ruby			puts "Hello"
		標準出力_Python			print "Hello"
		標準出力_Perl			print "Hello\n";

		標準入力_C++			string line; std::cin >> line; 
		標準入力_C#				string line = Console.ReadLine();
		標準入力_Java			String line = new Scanner(System.in).readLine();
		標準入力_JS				process.stdin.pipe(require('split')()).on('data', function(line){
									console.log(line);
								})
		標準入力_Ruby			line = STDIN.gets
		標準入力_Python			line = sys.stdin.readline()
		標準入力_Perl			while($line = <STDIN>){
									print "$line\n";
								}

基本
	変数
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 変数宣言
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
変数宣言_C++			int v = 10;
変数宣言_C#				int v = 10;
変数宣言_VB				Dim v As Integer = 10;
変数宣言_Java			int v = 10;
変数宣言_PHP			$v = 10;
変数宣言_JS				var v = 10;
変数宣言_Ruby			v = 10
変数宣言_Python			v = 10
変数宣言_Perl			my $v = 10;

# スコープ
グローバル変数_C++			int g = 10; // 関数外で宣言
グローバル変数_C#			<red>public static</red> class G{
								<red>public static</red> int g = 10;
							}
グローバル変数_VB			<red>public</red> g as Integer = 10;
グローバル変数_Java			<red>public static</red> class G{
								<red>public static</red> int g = 10;
							}
グローバル変数_PHP			<red>global</red> $g = 10;
グローバル変数_JS			<red>window.</red>g = 10;
グローバル変数_Ruby			<red>$</red>g = 10
グローバル変数_Python		<red>global</red> g
グローバル変数_Perl			<red>our</red> $g = 10;

局所変数_C++				{
								int p = 10;
							}
局所変数_C#					{
								int p = 10;
							}
局所変数_Java				{
								int p = 10;
							}
局所変数_VB					If True Then
								Dim p As Integer = 10
							End
局所変数_PHP				function foo(){
								$p = 10;
							}
局所変数_JS					function foo(){
								var p = 10;
							}
局所変数_Ruby				def foo
								p = 10
							end
局所変数_Python				def foo():
								p = 10
局所変数_Perl				{
								<red>my</red> $p = 10;
							}

定数宣言_C++				<red>const</red> int C = 10;
定数宣言_C#					<red>const</red> int C = 10;
定数宣言_VB					<red>Const</red> C As Integer = 10
定数宣言_Java				<red>static final</red> int C = 10;
定数宣言_PHP				<red>define</red>('C', 10);
定数宣言_JS					<red>const</red> C = 10;
定数宣言_Ruby				<red>C</red> = 10
定数宣言_Python				-
定数宣言_Perl				<red>use constant</red> C => 10;



# 数値リテラル
C++_10進					255
C++_16進					0xFF
C++_8進						0377
C++_2進						-

C++14_10進					255
C++14_16進					0xFF
C++14_8進					0377
C++14_2進					0b11111111

C#_10進						255
C#_16進						0xFF
C#_8進						-
C#_2進						-

VB_10進						255
VB_16進						&HFF
VB_8進						&O377
VB_2進						-

MSX-BASIC_2進				&B11111111 # 未検証

Java_10進					255
Java_16進					0xFF
Java_8進					0377
Java_2進					-

# http://php.net/manual/ja/language.types.integer.php
PHP_10進					255
PHP_16進					0xFF
PHP_8進						0377
PHP_2進						0b11111111

JS_10進						255
JS_16進						0xFF
JS_8進						0377
JS_2進						-

# http://js-next.hatenablog.com/entry/2013/07/31/042318
JS新_8進					0o377
JS新_2進					0b11111111

Ruby_10進					255
Ruby_16進					0xFF
Ruby_8進					0377, 0o377
Ruby_2進					0b11111111

# http://www.pythonweb.jp/tutorial/num/index1.html
Python_10進					255
Python_16進					0xFF
Python_8進					0377
Python_2進					0b11111111

Perl_10進					255
Perl_16進					0xFF
Perl_8進					0377
Perl_2進					0b11111111

数値リテラル_C#				255
							0xFF
数値リテラル_Java			10

# 文字リテラル
文字リテラル_C++			'A'
文字リテラル_C#				'A'
文字リテラル_Java			char c = 'A';
							char c = '\u0041';
							char c = 65;
文字リテラル_C++			'A'
文字リテラル_C++			'A'
文字リテラル_C++			'A'

文字列リテラル_C++			"ABC\\DEF"
							L"ABC\\DEF"
文字列リテラル_C#			"ABC\\DEF"
							@"ABC\DEF"
文字列リテラル_Java			"ABC\\DEF"
							"\u0041BC"
文字列リテラル_PHP			'ABC'
							"ABC $hoge"


制御
	分岐
		If分岐_C++					if(a){
										foo();
									}
									else if(b){
										bar();
									}
									else{
										baz();
									}
		If分岐_C#					if(a){
										foo();
									}
									else if(b){
										bar();
									}
									else{
										baz();
									}
		If分岐_Java					if(a){
										foo();
									}
									else if(b){
										bar();
									}
									else{
										baz();
									}
		If分岐_VB					If a Then
										foo
									ElseIf b Then
										bar
									Else
										baz
									End If
		If分岐_PHP					if(a){
										foo();
									}
									else if(b){
										bar();
									}
									else{
										baz();
									}
		If分岐_JS					if(a){
										foo();
									}
									else if(b){
										bar();
									}
									else{
										baz();
									}
		If分岐_Ruby					if a
										foo()
									elsif b
										bar()
									else
										baz()
									end
		If分岐_Python				if a:
										foo()
									elif b:
										bar()
									else:
										baz()
		If分岐_Perl					if(a){
										foo();
									}
									elsif(b){
										bar();
									}
									else{
										baz();
									}
		Switch分岐_C++				switch(a){
									case 0:
										foo();
										break;
									case 1:
										bar();
										break;
									default:
										baz();
										break;
									}
		Switch分岐_C#				switch(a){
									case 0:
										foo();
										break;
									case 1:
										bar();
										break;
									default:
										baz();
										break;
									}
		Switch分岐_Java				switch(a){
									case 0:
										foo();
										break;
									case 1:
										bar();
										break;
									default:
										baz();
										break;
									}
		Switch分岐_PHP				switch(a){
									case 0:
										foo();
										break;
									case 1:
										bar();
										break;
									default:
										baz();
										break;
									}
		Switch分岐_JS				switch(a){
									case 0:
										foo();
										break;
									case 1:
										bar();
										break;
									default:
										baz();
										break;
									}
		Switch分岐_Ruby				case a
									when 0
										foo()
									when 1
										bar()
									else
										baz()
									end
		Switch分岐_Python			-
		Switch分岐_Perl				use Switch;
									switch($a){
										case 0 { foo(); }
										case 1 { bar(); }
										else   { baz(); }
									}
		
	For系ループ
		Forループ_C++				for(int i = 0; i < 10; i++){
										std::out << i << "\n";
									}
		Forループ_C#				for(int i = 0; i < 10; i++){
										System.Console.WriteLine("" + i);
									}
		Forループ_Java				for(int i = 0; i < 10; i++){
										System.out.println("" + i);
									}
		Forループ_VB				For i = 0 To 9
										System.Console.WriteLine(i)
									Next
		Forループ_PHP				for($i = 0; $i < 10; $i++){
										print "$i\n";
									}
		Forループ_JS				for($i = 0; $i < 10; $i++){
										console.log($i);
									}
		ForEachループ_C++11			for(int e : v){
										std::cout << e;
									}
		ForEachループ_C++			std::vector<int> list;
									BOOST_FOREACH(int e, list){
										std::cout << e;
									}
		ForEachループ_PHP			foreach($list as $e){
										print "$e\n";
									}
		ForEachループ_JS			list.forEach(function(e, i){
										console.log(e);
									}
		ForEachループ_Ruby			list.each do |e|
										puts e
									end
		ForEachループ_Python		for e in list:
										print e
		ForEachループ_Perl			foreach my $e (@list){
										print "$e\n";
									}

	While系ループ
		Whileループ_C++				while(a){
										foo();
									}
		Whileループ_C#				while(a){
										foo();
									}
		Whileループ_Java			while(a){
										foo();
									}
		Whileループ_VB				While a
										foo
									End While
		Whileループ_PHP				while($a){
										foo();
									}
		Whileループ_Ruby			while a
										foo()
									end
		Whileループ_Python			while a:
										foo()
		Whileループ_Perl			while($a){
										foo();
									}
	ジャンプ
		ループ抜け_C++					break;
		ループ抜け_C#					break;
		ループ抜け_Java					break;
		ループ抜け_PHP					break;
		ループ抜け_JS					break;
		ループ抜け_Ruby					break
		ループ抜け_Python				break
		ループ抜け_Perl					last;
		
		ループ継続_C++					continue;
		ループ継続_C#					continue;
		ループ継続_Java					continue;
		ループ継続_PHP					continue;
		ループ継続_JS					continue;
		ループ継続_Ruby					next
		ループ継続_Python				continue
		ループ継続_Perl					next;

		関数抜け_C++					return v;
		関数抜け_C#						return v;
		関数抜け_Java					return v;
		関数抜け_PHP					return v;
		関数抜け_JS						return v;
		関数抜け_Ruby					return v
		関数抜け_Python					return v
		関数抜け_Perl					return v;

	例外
		例外送出_C++					throw std::exception("msg");
		例外送出_C#						throw new Exception("msg");
		例外送出_Java					throw new Exception("msg");
		例外送出_PHP					throw new Exception("msg");
		例外送出_JS						throw "msg";
		例外送出_Ruby					未
		例外送出_Python					未
		例外送出_Perl					未

		例外Catch_C++					try{
										}
										catch(const std::exception& ex){
										}
		例外Catch_C#					try{
										}
										catch(Exception ex){
										}
		例外Catch_Java					try{
										}
										catch(Exception ex){
										}
		例外Catch_PHP					try{
										}
										catch(Exception ex){
										}
		例外Catch_JS					try{
										}
										catch(ex){
										}
		例外Catch_Ruby					未
		例外Catch_Python				未
		例外Catch_Perl					未
# スコープ

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 文字列
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
文字列
	代入_C++		std::string s = "abc";
	代入_C#			string s = "abc";
	代入_Java		String s = "abc";
	代入_PHP		$s = "abc";
					$s = 'abc';
	代入_JS			var s = "abc";
					var s = 'abc';
	代入_Ruby		s = "abc";
					s = 'abc';
	代入_Python		s = "abc";
					s = 'abc';
	代入_Perl		未

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 演算
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# ひとつひとつなケース
論理OR_C++		a = b || c;
論理AND_C++		a = b && c;
論理NOT_C++		a = !b;

論理OR_C#		a = b || c;
論理AND_C#		a = b && c;
論理NOT_C#		a = !b;

論理OR_Java		a = b || c;
論理AND_Java	a = b && c;
論理NOT_Java	a = !b;

論理OR_VB		a = b Or c
論理AND_VB		a = b And c
論理NOT_VB		a = Not b

論理OR_PHP		a = $b || $c;
論理AND_PHP		a = $b && $c;
論理NOT_PHP		a = !$b;

論理OR_JS		a = b || c;
論理AND_JS		a = b && c;
論理NOT_JS		a = !b;

論理OR_Ruby		a = b || c
				a = (b or c)
論理AND_Ruby	a = b && c
				a = (b or c)
論理NOT_Ruby	a = !b
				a = (not b)

論理OR_Python	a = b || c;
論理AND_Python	a = b && c;
論理NOT_Python	a = !b;

論理OR_Perl		$a = $b || $c;
				$a = ($b or $c);
論理AND_Perl	$a = $b && $c;
				$a = ($b and $c);
論理NOT_Perl	$a = !$b;
				$a = not $b;


# まとめたケース
論理演算_C++	a = b || c;
				a = b && c;
				a = !b;
ビット演算_C++	a = b | c;
				a = b & c;
				a = b ^ c;
				a = ~b;
四則演算_C++	a = b + c;
				a = b - c;
				a = b * c;
				a = b / c;
				a = b % c;

論理演算_C#		a = b || c;
				a = b && c;
				a = !b;
ビット演算_C#	a = b | c;
				a = b & c;
				a = b ^ c;
				a = ~b;
四則演算_C#		a = b + c;
				a = b - c;
				a = b * c;
				a = b / c;
				a = b % c;

論理演算_Java	a = b || c;
				a = b && c;
				a = !b;
ビット演算_Java	a = b | c;
				a = b & c;
				a = b ^ c;
				a = ~b;
四則演算_Java	a = b + c;
				a = b - c;
				a = b * c;
				a = b / c;
				a = b % c;

論理演算_VB		a = b Or c
				a = b And c
				a = Not b
ビット演算_VB	a = b Or c
				a = b And c
				a = b Xor c
				a = Not b
四則演算_VB		a = b + c
				a = b - c
				a = b * c
				a = b / c
				a = b Mod c

論理演算_PHP	a = b || c;
				a = b && c;
				a = !b;
ビット演算_PHP	a = b | c;
				a = b & c;
				a = b ^ c;
				a = ~b;
四則演算_PHP	a = b + c;
				a = b - c;
				a = b * c;
				a = b / c;
				a = b % c;

論理演算_JS		a = b || c;
				a = b && c;
				a = !b;
ビット演算_JS	a = b | c;
				a = b & c;
				a = b ^ c;
				a = ~b;
四則演算_JS		a = b + c;
				a = b - c;
				a = b * c;
				a = b / c;
				a = b % c;

論理演算_Ruby		a = b || c
					a = (b or c)
					a = b && c
					a = (b and c)
					a = !b
					a = (not b)
ビット演算_Ruby		a = b | c
					a = b & c
					a = b ^ c
					a = ~b
四則演算_Ruby		a = b + c
					a = b - c
					a = b * c
					a = b / c
					a = b % c

論理演算_Python		a = b || c;
					a = b && c;
					a = !b;
ビット演算_Python	a = b | c;
					a = b & c;
					a = b ^ c;
					a = ~b;
四則演算_Python		a = b + c;
					a = b - c;
					a = b * c;
					a = b / c;

論理演算_Perl		$a = $b || $c;
					$a = ($b or $c);
					$a = $b && $c;
					$a = ($b and $c);
					$a = !$b;
					$a = not !$b;
ビット演算_Perl		$a = $b | $c;
					$a = $b & $c;
					$a = $b ^ $c;
					$a = ~$b;
四則演算_Perl		$a = $b + $c;
					$a = $b - $c;
					$a = $b * $c;
					$a = $b / $c;
					$a = $b % $c;

# 余りとか %, Mod

# True, False
C++_True定数	true
C++_False定数	false
C++_True判定	False判定以外
C++_False判定	false, 0

C#_True定数			true
C#_False定数		false
C#_True判定			true
C#_False判定		false

Java_True定数		true
Java_False定数		false
Java_True判定		true
Java_False判定		false

VB_True定数			True
VB_False定数		False
VB_True判定			True
VB_False判定		False

# http://php.net/manual/ja/types.comparisons.php
PHP_True定数		TRUE (大小文字区別無)
PHP_False定数		FALSE (大小文字区別無)
PHP_True判定		False判定以外
PHP_False判定		FALSE, 0, NULL, '', '0', [], 未定義

# http://qiita.com/phi/items/723aa59851b0716a87e3
JS_True定数			true
JS_False定数		false
JS_True判定			False判定以外 # [], '0' 等はTrue扱い
JS_False判定		false, undefined, 0, ''
JS_無効値			null
					undefined
					NaN
JS_無効値判定関数	typeof

# http://qiita.com/sgtn/items/0cb16ef16d938cf98094
Ruby_True定数		true		
Ruby_False定数		false
Ruby_True判定		False判定以外 # 0はTrue扱い
Ruby_False判定		false, nil
Ruby_無効値			nil
Ruby_無効値判定関数	v.nil?
					v.empty?
					v.blank?

Python_True定数		True
Python_False定数	False
Python_True判定		False判定以外
Python_False判定	False, 0, '', (), [], {}
Python_無効値		False
					None

Perl_True定数		-
Perl_False定数		-
Perl_True判定		False判定以外
Perl_False判定		0, '', '0'
Perl_無効値			-


ビットOR_C++		a = b | c;
ビットAND_C++		a = b & c;
ビットXOR_C++		a = b ^ c;
ビットNOT_C++		a = ~b;

ビットOR_C#			a = b | c;
ビットAND_C#		a = b & c;
ビットXOR_C#		a = b ^ c;
ビットNOT_C#		a = ~b;

ビットOR_Java		a = b | c;
ビットAND_Java		a = b & c;
ビットXOR_Java		a = b ^ c;
ビットNOT_Java		a = ~b;

ビットOR_VB			a = b Or c
ビットAND_VB		a = b And c
ビットXOR_VB		a = b Xor c
ビットNOT_VB		a = Not b

ビットOR_PHP		$a = $b | $c;
ビットAND_PHP		$a = $b & $c;
ビットXOR_PHP		$a = $b ^ $c;
ビットNOT_PHP		$a = ~$b;

ビットOR_JS			a = b | c;
ビットAND_JS		a = b & c;
ビットXOR_JS		a = b ^ c;
ビットNOT_JS		a = ~b;

ビットOR_Ruby		a = b | c
ビットAND_Ruby		a = b & c
ビットXOR_Ruby		a = b ^ c
ビットNOT_Ruby		a = ~b

ビットOR_Python		a = b | c;
ビットAND_Python	a = b & c;
ビットXOR_Python	a = b ^ c;
ビットNOT_Python	a = ~b;

ビットOR_Perl		$a = $b | $c;
ビットAND_Perl		$a = $b & $c;
ビットXOR_Perl		$a = $b ^ $c;
ビットNOT_Perl		$a = ~$b;

# flips every bit, bitwide not


# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 無効値
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
無効値_Ruby				nil

BOOL無効値_C++			false
BOOL無効値_C#			false
BOOL無効値_Java			false
BOOL無効値_PHP			false
BOOL無効値_JS			false
BOOL無効値_Ruby			未
BOOL無効値_Python		未
BOOL無効値_Perl			未

参照無効値_C++			NULL
参照無効値_C＃			null
参照無効値_Java			null
参照無効値_PHP			$v = 10;
参照無効値_JS			null
						undefined
参照無効値_Ruby			nil
参照無効値_Python		None
参照無効値_Perl			undefined


無効値判定_C++			if(v){}
無効値判定_Ruby			if(v){ … }


# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 配列
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
配列確保_C++			int v[] = {10, 20};
配列確保_C＃			int[] v = new int[]{10, 20};
配列確保_Java			int[] v = new int[]{10, 20};
配列確保_PHP			$v = [10, 20];
配列確保_JS				var v = [10, 20];
配列確保_Ruby			v = [10, 20];
配列確保_Python			v = [10, 20];
配列確保_Perl			my @v = (10, 20);

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 制御構造
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- #
# 分岐
# クラス定義
# 関数定義
